---
layout: post
title:  C/C++编程心得（四）
category: language 
---

* toc
{:toc}

# Defaulted & Deleted

特殊成员函数主要包括：

1.默认构造函数(不带参数的构造函数)

2.析构函数

3.赋值函数(operator=)（按字节拷贝）

4.拷贝构造函数（用一个对象来初始化另一个对象，只有一个参数，参数类型是本类的引用。`X(X&)`）(按字节拷贝)

5.移动构造函数（`X(X&&)`）

6.移动赋值函数

其中，2、3、4被称为big three，2、3、4、5、6被称为big five。5、6是C++11中引入右值和move的结果。

https://www.jianshu.com/p/0b0f84b49736

C++缺省函数（big three,big five）

---

```cpp
class X{
public:
  X(int i){
   a = i;
  }
  X(const X&) = delete;
  X()=default;
private:
 int a;
};

X x;
```

由于已经有了`X(int i)`，编译器就不会生成默认的`X()`了，因此`X x;`会出错。解决办法是`X()=default;`。

如果想禁用默认函数的话，可以使用`=delete`。上例中，就是禁用默认的拷贝构造函数的示例。

default仅用于类的特殊成员函数，且该特殊成员函数没有默认参数。

```cpp
class X {
public:
    int f() = default: //错误，f()非特殊成员函数
    X(int) = default; //错误，非默认构造函数
    X(int i = 1) = default; // 错误，含有默认参数
}
```

参考：

https://www.ibm.com/developerworks/cn/aix/library/1212_lufang_c11new/index.html

C++11标准新特性：Defaulted和Deleted函数

# assert

```cpp
assert(ExprSymbol && "Function not found");
```

这个用法挺有意思的。

# const

```cpp
class A
{
   void function() const; //常成员函数, 它不改变对象的成员变量,
                        //也不能调用类中任何非const的成员函数。
} 
```

const：在编译期保证在C的“源代码”里面，没有对其修饰的变量进行修改的地方（如有则报错，编译不通过），而运行期该变量的值是否被改变，则不受const的限制。

volatile：“请不要做自以为是的优化，这个值可能变掉的”，而并非“你可以修改这个值”。

const volatile：变量在程序编译期不能被修改且不能被优化；在程序运行期，变量值可修改，但每次用到该变量的值都要从内存中读取，以防止意外错误。

# 虚函数

```cpp
class Shape {
public:
    virtual void Draw() const = 0;    // 1) 纯虚函数
    virtual void Error(const string& msg);  // 2) 普通虚函数
    int ObjectID() const;  // 3) 非虚函数
};

class Rectangle: public Shape { ... };
```
- 非虚函数：

基类和派生类都有该函数：

```cpp
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Shape::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 普通虚函数：

基类和派生类都有该函数：

```cpp
Rectangel rc; // rc is an object of type Rectangle
Shape *pB = &rc; // get pointer to rc
Rectangle *pD = &rc; // get pointer to rc

pB->ObjectID(); // calls Rectagle::ObjectID()
pD->ObjectID(); // calls Rectagle::ObjectID()
```

如果派生类没有该函数，则无论`pB->ObjectID();`还是`pD->ObjectID();`都调用Shape::ObjectID()。

- 纯虚函数虽然要求派生类必须实现该函数，但并不意味着基类就不可以实现。但需要用特殊的语法才能调用基类实现。

```cpp
ps1->Shape::Draw(); // calls Shape::draw
```

基类和派生类都有该函数的情况与普通虚函数相同。

---

这是override的4种错误情况：

```cpp
class Base {
public:
    virtual void mf1() const;
    virtual void mf2(int x);
    virtual void mf3() &;
    void mf4() const;// is not declared virtual in Base
};

class Derived: public Base {
public:
    virtual void mf1();// declared const in Base, but not in Derived.
    virtual void mf2(unsigned int x);// takes an int in Base, but an unsigned int in Derived
    virtual void mf3() &&;// is lvalue-qualified in Base, but rvalue-qualified in Derived.
    void mf4() const;
};
```

由于声明上的差异，这4种情况均无法override，且不易查找。

```cpp
class Derived: public Base {
public:
    virtual void mf1() const override;// adding "virtual" is OK, but not necessary
    virtual void mf2(int x) override;
    void mf3() & override;
    void mf4() const override; 
};
```
添加`override`关键字之后，就会去基类中查找是否有匹配成员函数，否则直接报错。

---

对`‘vtable for xxxx’`未定义的引用：

必须吐槽一下C++的错误提示，这个错误如果改成没有实现XXX虚函数，就直观的多了。

参考：

https://www.cnblogs.com/xinxue/p/5471708.html

C++11之override

# typedef struct

在C中：

```c
typedef struct Student
{
  int a;
}Stu;
```

于是在声明变量的时候就可：`Stu stu1;`

如果没有typedef就必须用`struct Student stu1;`来声明。

这里的Stu实际上就是struct Student的别名。

但是在C++中：

```cpp
struct Student
{
  int a;
};
```

声明变量时可直接`Student stu2；`

所以当给C++的库提供C的接口时，经常可以看见如下用法：

```cpp
typedef struct Student Student;
```

这样就可以抹平两者的差异了。

参考：

https://www.cnblogs.com/qyaizs/articles/2039101.html

struct和typedef struct彻底明白了

# cout格式化输出

```c
cout<<hex<<i<<endl; //输出十六进制数
cout<<oct<<i<<endl; //输出八进制数
cout<<dec<<i<<endl; //输出十进制数
```

# 小细节

对于std::vector来说，begin()/end()返回iterator，而front()/back()返回的是element。此外，还有cbegin()/cend()返回const iterator。

```cpp
template< class InputIt >
vector( InputIt first, InputIt last,
        const Allocator& alloc = Allocator() );
```

这个构造函数很有意思，可以用于复制一个[first, last)区间的数据。

---

除了for循环遍历之外，C++还可以用std::for_each/std::find_if进行循环遍历，尤其是后者可以用于条件筛选。

```cpp
for(auto& item: list)
{
  //do sth
}
```

还有一些方法可用于统计：

std::all_of, std::any_of, std::none_of：全都是/至少有一个是/全都不是XXX。

std::count, std::count_if：计数。

---

map：存储key-value pair。`iterator->first`指向key，而`iterator->second`指向value。

set：只有value。set也有unordered_set这样的变种。

map和set都不允许重复值，如果需要重复的话，可以使用multiset和multimap。

---

```cpp
template<typename T>
struct S {
    template<typename U> void foo(){}
};
 
template<typename T>
void bar()
{
    S<T> s;
    s.foo<T>(); // error: < parsed as less than operator
    s.template foo<T>(); // OK
}
```

上面是`template`的一种特殊用法，本来`s.foo<T>()`也就行了，然而编译器会把它当作`s.foo<T`，所以需要加上`template`以示区分。

---

数字转字符串：

```cpp
double a = 123.32;
string res;
stringstream ss;
ss << a;
ss >> res;//Or res = ss.str();
```

字符串转数字：

```cpp
string a = "123.32";
double res;
stringstream ss;
ss << a;
ss >> res;
```

---

```cpp
#define DispatchOnTensorType(tensor_type, function, ...)          \
  switch (tensor_type->AsPrimitiveDataType()->GetDataType()) {    \
    case ONNX_NAMESPACE::TensorProto_DataType_FLOAT:              \
      function<float>(__VA_ARGS__);                               \
      break;                                                      \
    case ONNX_NAMESPACE::TensorProto_DataType_BOOL:               \
      function<bool>(__VA_ARGS__);                                \
      break;                                                      \
    case ONNX_NAMESPACE::TensorProto_DataType_DOUBLE:             \
      function<double>(__VA_ARGS__);                              \
      break;                                                      \
```

# POD

POD，全称plain old data，plain代表它是一个普通类型，old代表它可以与c兼容，可以使用比如memcpy()这类c中最原始函数进行操作。

POD数据类型主要用来解决C++与C之间数据类型的兼容性，以实现C++程序与C函数的交互。

参考：

https://blog.csdn.net/fu_zk/article/details/17028669

C++的POD数据类型

https://www.cnblogs.com/DswCnblog/p/6371071.html

C++11 POD类型

# 命令行解析

https://github.com/jarro2783/cxxopts

https://github.com/tanakh/cmdline

https://github.com/gflags/gflags

前两个是轻量级的库，只要包含header即可。gflags是Google的产品，适合比较高端的用法。

此外，boost::program_options也是一个选择。

和命令行解析相对的，就是命令行输出了。

https://github.com/agauniyal/rang

这个项目可以设置终端输出的颜色等效果。

# std::any & std::variant & std::optional

std::any：一个类型安全的容器，可以放置各种类型的数据。类似于`void*`。

std::variant：类型安全的union。

std::optional：该类型是用来表示一个值是不是存在的。std::optional有两个状态，即有值和无值。通常我们将std::optional用于函数的返回值，当函数执行成功了返回有值的状态，当函数执行失败了返回无值的状态。

参考：

https://www.jianshu.com/p/b2ec40c1c7c1

C++17：std::any, std::variant 和 std::optional

# std::transform

```cpp
std::string s("Hello");
std::transform(s.begin(), s.end(), s.begin(),
    [](unsigned char c) { return std::toupper(c); });
std::cout << s << std::endl; // HELLO
```

# std::string

std::string有很多实现方式，归纳起来有三类，而每类又有多种变化。

1、无特殊处理（eager copy），采用类似std::vector的数据结构。现在很少采用这种方式。

2、Copy-on-write（COW），g++的std::string一直采用这种方式，不过慢慢被SSO取代。

3、短字符串优化（SSO），利用string对象本身的空间来存储短字符串。Visual C++ 2010、clang libc、linux gnu5.x之后都采用的这种方式。

https://www.cnblogs.com/cthon/p/9181979.html

c++再探string之eager-copy、COW和SSO方案
