---
layout: post
title: CPU(三)
category: Chip 
---

* toc
{:toc}

# CPU

## Cache Line

高速缓存其实就是一组称之为缓存行(cache line)的固定大小的数据块，其大小是以突发读或者突发写周期的大小为基础的。

每个高速缓存行完全是在一个突发读操作周期中进行填充或者下载的。即使处理器只存取一个字节的存储器，高速缓存控制器也启动整个存取器访问周期并请求整个数据块。缓存行第一个字节的地址总是突发周期尺寸的倍数。缓存行的起始位置总是与突发周期的开头保持一致。

https://zhuanlan.zhihu.com/p/37749443

计算机缓存Cache以及Cache Line详解

## Bélády's Algorithm

Bélády认为最好的缓存算法是：丢弃那些在将来最长时间不被使用的数据。显然这是一个理想化的算法，因为我们没有办法预测未来。但它可以作为衡量缓存算法优越度的一个理论上限。

>László Bélády，1928年生，匈牙利计算机科学家。Technical University of Budapest本硕。IBM研究员。

LFU: least frequently used

LRU: least recently used

https://mp.weixin.qq.com/s/AdmEd1FHxpZUwSGYy3qggg

利用cpu缓存实现高性能程序

https://zhuanlan.zhihu.com/p/591436083

经典论文解读——Cache替换算法

## Scratchpad Memory

除了Cache之外，Scratchpad memory(SPRAM)也是一种常见的内存缓冲硬件。

两者的区别是：

- Cache通过硬件来管理每个位置上存放的数据；SPM没有硬件管理的替换策略，由程序员来管理数据的存放位置。因此，spm的控制逻辑比较简单，能耗也比较低。

- 当访存行为不规则时，cache中的硬件管理机制可以有效的管理数据。但当程序中的访存行为可以很容易的描述出来时，程序员可以根据程序的访存行为设计spm的数据存取方式，从而提高访存效率。

https://blog.csdn.net/weixin_48304306/article/details/125799814

Cache与Scratch-pad-memory（spm）的区别

## C Model

在芯片的架构设计阶段需要对芯片进行建模（modeling），建模的主要目的是在大规模投入人力之前先用低成本的计算机软件实现目标芯片的主要功能，评估芯片的工作效果，验证设计思想，并作为后续开发活动的标准和依据。由于这里的软件开发一般使用C语言，所以也叫做C Model。

一般而言，C Model的功能定位可能会有以下几种：

1. 作为算法模型的C版本，定义模块输入输出行为的标准，实现数据的bit-match；

2. 在1的基础上，定义模块的内部结构和资源约束；

3. 在2的基础上，精确定义模块的输入输出时序，实现cycle-accurate；

https://zhuanlan.zhihu.com/p/263012865

ASIC Design and C Model

## Jim Keller

<table style="text-align:center" width="85%">
  <tbody>
    <tr>
      <td colspan="5">Jim Keller: Work Experience</td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1"></td>
      <td>Company</td>
      <td>Title</td>
      <td>Important<br />
      Product</td>
    </tr>
    <tr>
      <td><strong>1980s</strong></td>
      <td><strong>1998</strong></td>
      <td>DEC</td>
      <td>Architect</td>
      <td>Alpha</td>
    </tr>
    <tr>
      <td><strong>1998</strong></td>
      <td><strong>1999</strong></td>
      <td>AMD</td>
      <td>Lead Architect</td>
      <td>K7, K8v1<br />
      HyperTransport</td>
    </tr>
    <tr>
      <td><strong>1999</strong></td>
      <td><strong>2000</strong></td>
      <td>SiByte</td>
      <td>Chief Architect</td>
      <td>MIPS Networking</td>
    </tr>
    <tr>
      <td><strong>2000</strong></td>
      <td><strong>2004</strong></td>
      <td>Broadcom</td>
      <td>Chief Architect</td>
      <td>MIPS Networking</td>
    </tr>
    <tr>
      <td><strong>2004</strong></td>
      <td><strong>2008</strong></td>
      <td>P.A. Semi</td>
      <td>VP Engineering</td>
      <td>Low Power Mobile</td>
    </tr>
    <tr>
      <td><strong>2008</strong></td>
      <td><strong>2012</strong></td>
      <td>Apple</td>
      <td>VP Engineering</td>
      <td>A4 / A5 Mobile</td>
    </tr>
    <tr>
      <td><strong>8/2012</strong></td>
      <td><strong>9/2015</strong></td>
      <td>AMD</td>
      <td>Corp VP and<br />
      Chief Cores Architect</td>
      <td>Skybridge / K12<br />
      (+ Zen)</td>
    </tr>
    <tr>
      <td><strong>1/2016</strong></td>
      <td><strong>4/2018</strong></td>
      <td>Tesla</td>
      <td>VP Autopilot<br />
      Hardware Engineering</td>
      <td>Fully Self-Driving<br />
      (FSD) Chip</td>
    </tr>
    <tr>
      <td><strong>4/2018</strong></td>
      <td><strong>6/2020</strong></td>
      <td>Intel</td>
      <td>Senior VP<br />
      Silicon Engineering</td>
      <td>?</td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1"><strong>2021</strong></td>
      <td>Tenstorrent</td>
      <td>President and CTO</td>
      <td>TBD</td>
    </tr>
  </tbody>
</table>

## IPC

IPC就是每个时钟周期(1Hz)执行指令的数量，但对于现代CPU，IPC这个参数已经不适用。因此现在是把使用测试程序得到的CPU单核成绩换算到1GHz，把每GHz的成绩称为IPC或PPC。奔腾4的频率与现代CPU差不多，但因PPC/IPC不到Intel 11代酷睿的1/5，所以在频率相同的时候，奔腾4的单核性能就不到11代酷睿的1/5。

CPU的IPC比频率更加重要，因为IPC代表了CPU核心的设计水平，频率则只要使用更新的工艺，就几乎一定能得到提升。

CPU的核心设计会影响提高频率的难度，通常IPC越高，频率就越难提高，但也不是决定性的因素。因为Intel的CPU不但IPC比国产CPU都高，频率还能超过5.0GHz。

龙芯认为在CPU核心逻辑设计水平接近同期的主流产品之前，没有必要过于注重工艺和频率。因此龙芯在中科院计算所时，每一代设计都在大幅度修改CPU核心的逻辑设计。

## 存算一体

![](/images/img4/bottleneck.png)

传统架构存在上图所示的“存储墙”问题。

目前存算技术主要有几个方向：

查存计算（Processing With Memory）：GPU中对于复杂函数就采用了这种计算方法，是早已落地多年的技术。存储芯片内部的存储单元完成查表计算操作，存储单元和计算单元完全融合，没有一个独立的计算单元。

近存计算（Computing Near Memory）：典型代表包括AMD的Zen系列CPU。计算操作由位于存储区域外部的独立计算芯片/模块完成。这种架构设计的代际设计成本较低，适合传统架构芯片转入。

存内计算（Computing In Memory）：典型代表是Mythic、闪忆、知存、九天睿芯。计算操作由位于存储芯片/区域内部的独立计算单元完成，存储和计算可以是模拟的也可以是数字的。这种路线适合算法固定的场景算法计算，目前主要用于语音等轻算力场景。

![](/images/img5/Computing_In_Memory.webp)

https://mp.weixin.qq.com/s/kq5F47N3LS43ZKdwe9-CUQ

端侧智能存算一体芯片的需求、现状与挑战

https://zhuanlan.zhihu.com/p/480612865

存算一体技术是什么？发展史、优势、应用方向、主要介质

https://zhuanlan.zhihu.com/p/522755103

存算一体芯片设计与编译器开发

https://zhuanlan.zhihu.com/p/444859995

阿里达摩院最新存算芯片技术解读

## 国产CPU

当年引进“以赛亚”内核的时候，兆芯的性能是优于龙芯的，然而，经过这些年的发展，龙芯通过不断迭代内核大幅提升的CPU性能，CPU性能已经超越兆芯。要知道，当时，兆芯承接核高基01专项，而且还有上海市地方海量资金扶持，而龙芯获得的经费和补贴相对于兆芯少的可怜。龙芯用实践证明了自主研发更具发展后劲，自主研发具有更高的效费比，可以花小钱办大事。

2013年前后，兆芯向威盛支付了一大笔钱购买技术。2020年10月，兆芯又向威盛支付了一大笔钱。这种“买了又买”的事实很容易让人产生疑惑，兆芯到底能不能不再向威盛买技术？能不能真正独立自主发展？

VIA为了让兆芯更加尊重知识、珍惜技术，即使是落后的技术，VIA也会用高昂的价格体现知识的价值。

VIA已经离开主流电脑市场十几年，芯片组技术也至少落后了主流十几年。现在才把相关技术转让给兆芯，可能是为了避免拔苗助长，才敝帚自珍。

这次交易掏空了VIA所剩无几的技术储备，Centaur新设计的CPU核心也没能超过国内自主设计的水平，因此Centaur已经失去了继续存在的价值。

VIA在2021年11月把Centaur的技术团队卖给了Intel，之后又出售厂房和设备，完全放弃了继续研发CPU的能力。

兆芯的传承起至1980年，那一年美国Integrated Device Technology（IDT公司）成立。1988年美国Cyrix公司成立。这两家公司都设计x86架构CPU，以性价比与Intel产品竞争。

威盛（VIA）在1999年6月先后买下Cyrix微处理器设计部门和Centaur（从前的IDT）后，合并为VIA在美国的处理器研发总部，仍然叫作Centaur。这是第一次传承转移，然后VIA把Centaur在x86方面的技术成果全盘出售给兆芯，完成了第二次衣钵传承。

https://mp.weixin.qq.com/s/HDTNCrKYJ7daZieg4rb4VA

英特尔收购威盛X86业务 兆芯何去何从

https://zhuanlan.zhihu.com/p/530763927

兆芯枯木育新枝，前尘入魂续今世

---

海光买了AMD zen-（浮点单元阉割一半）的IP，但是买不到zen2和之后的新核心，因为AMD不卖。

飞腾找台湾世芯代理设计，但因飞腾参与超算建设上了美国黑名单，台湾世芯宁可承受损失也不再继续提供设计服务。

飞腾的通用CPU单核性能变化像是过山车，因为它的FT-1000和FT-1500是基于SUN开源的UltraSPARC T2核心，2007年时的UltraSPARC T2可与Intel至强一较高下。飞腾在投靠ARM之后，CPU性能反而降低了。

飞腾多核互联和多路互联的技术较强，只是在ARM推出原生的互联方案之后，飞腾的研究成果也成了鸡肋。
