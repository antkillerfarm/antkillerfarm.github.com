---
layout: post
title: CPU(三)
category: Chip 
---

* toc
{:toc}

# CPU

## Scratchpad Memory

除了Cache之外，Scratchpad memory(SPRAM)也是一种常见的内存缓冲硬件。

两者的区别是：

- Cache通过硬件来管理每个位置上存放的数据；SPM没有硬件管理的替换策略，由程序员来管理数据的存放位置。因此，spm的控制逻辑比较简单，能耗也比较低。

- 当访存行为不规则时，cache中的硬件管理机制可以有效的管理数据。但当程序中的访存行为可以很容易的描述出来时，程序员可以根据程序的访存行为设计spm的数据存取方式，从而提高访存效率。

https://blog.csdn.net/weixin_48304306/article/details/125799814

Cache与Scratch-pad-memory（spm）的区别

## C Model

在芯片的架构设计阶段需要对芯片进行建模（modeling），建模的主要目的是在大规模投入人力之前先用低成本的计算机软件实现目标芯片的主要功能，评估芯片的工作效果，验证设计思想，并作为后续开发活动的标准和依据。由于这里的软件开发一般使用C语言，所以也叫做C Model。

一般而言，C Model的功能定位可能会有以下几种：

1. 作为算法模型的C版本，定义模块输入输出行为的标准，实现数据的bit-match；

2. 在1的基础上，定义模块的内部结构和资源约束；

3. 在2的基础上，精确定义模块的输入输出时序，实现cycle-accurate；

https://zhuanlan.zhihu.com/p/263012865

ASIC Design and C Model

## Jim Keller

<table style="text-align:center" width="85%">
  <tbody>
    <tr>
      <td colspan="5">Jim Keller: Work Experience</td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1"></td>
      <td>Company</td>
      <td>Title</td>
      <td>Important<br />
      Product</td>
    </tr>
    <tr>
      <td><strong>1980s</strong></td>
      <td><strong>1998</strong></td>
      <td>DEC</td>
      <td>Architect</td>
      <td>Alpha</td>
    </tr>
    <tr>
      <td><strong>1998</strong></td>
      <td><strong>1999</strong></td>
      <td>AMD</td>
      <td>Lead Architect</td>
      <td>K7, K8v1<br />
      HyperTransport</td>
    </tr>
    <tr>
      <td><strong>1999</strong></td>
      <td><strong>2000</strong></td>
      <td>SiByte</td>
      <td>Chief Architect</td>
      <td>MIPS Networking</td>
    </tr>
    <tr>
      <td><strong>2000</strong></td>
      <td><strong>2004</strong></td>
      <td>Broadcom</td>
      <td>Chief Architect</td>
      <td>MIPS Networking</td>
    </tr>
    <tr>
      <td><strong>2004</strong></td>
      <td><strong>2008</strong></td>
      <td>P.A. Semi</td>
      <td>VP Engineering</td>
      <td>Low Power Mobile</td>
    </tr>
    <tr>
      <td><strong>2008</strong></td>
      <td><strong>2012</strong></td>
      <td>Apple</td>
      <td>VP Engineering</td>
      <td>A4 / A5 Mobile</td>
    </tr>
    <tr>
      <td><strong>8/2012</strong></td>
      <td><strong>9/2015</strong></td>
      <td>AMD</td>
      <td>Corp VP and<br />
      Chief Cores Architect</td>
      <td>Skybridge / K12<br />
      (+ Zen)</td>
    </tr>
    <tr>
      <td><strong>1/2016</strong></td>
      <td><strong>4/2018</strong></td>
      <td>Tesla</td>
      <td>VP Autopilot<br />
      Hardware Engineering</td>
      <td>Fully Self-Driving<br />
      (FSD) Chip</td>
    </tr>
    <tr>
      <td><strong>4/2018</strong></td>
      <td><strong>6/2020</strong></td>
      <td>Intel</td>
      <td>Senior VP<br />
      Silicon Engineering</td>
      <td>?</td>
    </tr>
    <tr>
      <td colspan="2" rowspan="1"><strong>2021</strong></td>
      <td>Tenstorrent</td>
      <td>President and CTO</td>
      <td>TBD</td>
    </tr>
  </tbody>
</table>

## IPC

IPC就是每个时钟周期(1Hz)执行指令的数量，但对于现代CPU，IPC这个参数已经不适用。因此现在是把使用测试程序得到的CPU单核成绩换算到1GHz，把每GHz的成绩称为IPC或PPC。奔腾4的频率与现代CPU差不多，但因PPC/IPC不到Intel 11代酷睿的1/5，所以在频率相同的时候，奔腾4的单核性能就不到11代酷睿的1/5。

CPU的IPC比频率更加重要，因为IPC代表了CPU核心的设计水平，频率则只要使用更新的工艺，就几乎一定能得到提升。

CPU的核心设计会影响提高频率的难度，通常IPC越高，频率就越难提高，但也不是决定性的因素。因为Intel的CPU不但IPC比国产CPU都高，频率还能超过5.0GHz。

龙芯认为在CPU核心逻辑设计水平接近同期的主流产品之前，没有必要过于注重工艺和频率。因此龙芯在中科院计算所时，每一代设计都在大幅度修改CPU核心的逻辑设计。

## 内存一致性

具有共享内存的系统中，所有的处理器都能访问到同一地址空间(比如：能看到同一个全局变量)。在这样的系统中，多个线程如何去更新全局变量，底层硬件和编程者要达成共识，并遵守相关的访问协议。这些协议被称为“内存一致性模型”。

x86使用的TSO和ARM的Relaxed模型相比，通过更复杂的硬件设计保证了更强的一致性，对软件的要求更松；ARM因为Relaxed模型比较宽松（几乎成了个分布式系统），原本x86靠硬件保证的东西就需要软件通过额外插入barrier来保证。

插barrier不管怎么样都是多了指令，对icache/uop cache有压力，访存后端也一般假设barrier出现得比正常访存少得多因此不会花大力气优化。

https://www.zhihu.com/question/350284825

既然x86的cpu是把cisc翻译成RISC再执行的，为什么arm模拟x86那么困难，性能差那么多呢？

https://zhuanlan.zhihu.com/p/422848235

内存一致性(Memory Consistency)

https://www.cl.cam.ac.uk/~pes20/weakmemory/

Relaxed-Memory Concurrency

## 机柜

机柜、板卡的尺寸规格也有工业标准，以方便不同厂商产品的互联和替换。

OCP：Open Compute Project

OAM：OCP Accelerator Module

UBB：Universal Base Board

https://zhuanlan.zhihu.com/p/339628067

开放计算的源起，对比标准x86服务器开放计算有哪些特点和创新？

https://zhuanlan.zhihu.com/p/571417872

开放整机柜服务器简史

## RISC-V

https://mp.weixin.qq.com/s/LreWWlXAQL-dqQBCk93soQ

解读两大精简指令集：RISC-V和MIPS

https://mp.weixin.qq.com/s/5uie8Ci5dK_wy54Z70Gklg

RISC-V精简到何种程度？能省的都省了！

https://mp.weixin.qq.com/s/JNCC3C3Sq0Hzk_5VBcivng

RISC-V有何特别之处？

---

尽管Verilog曾经极大地推动了工程师设计能力的以指数级提升，但是在当下，随着芯片规模尤其是AI芯片规模的急剧增大，Verilog低效的描述方式已经被广为诟病。U.C. Berkeley在设计RISC-V的时候引入Chisel语言。

https://zhuanlan.zhihu.com/p/98097268

初学Chisel语言，看这篇就够了：最方便简洁的入门资料整理

## 多核拓扑

![](/images/img4/In_Chip_Bus.jpg)

Crossbar（XBAR）

各种拓扑结构：ring、torus、fat-tree、dragonfly。

![](/images/img5/Dragonfly.png)

Dragonfly的拓扑结构分为三层：Switch层，Group层，System层。

- Switch层：包括一个交换机（橙色方块），及其相连的p个计算节点（粉色圆圈）。
- Group层（灰色椭圆）：包含a个Switch层，这a个Switch层的a个交换机是全连接(All-to-all)的，换言之，每个交换机都有a-1条链路连接分别连接到其他的a-1台交换机。
- System层：包含g个Group层，这g个Group层也是全连接的。

![](/images/img5/Spine_Leaf.jpg)

上图为Spine+Leaf结构。

https://zhuanlan.zhihu.com/p/32216294

破茧化蝶，从Ring Bus到Mesh网络，CPU片内总线的进化之路

https://blog.csdn.net/CodeSavior/article/details/114446140

Spine+Leaf叶脊网络架构

https://zhuanlan.zhihu.com/p/371827494

片内互联中常用的拓扑结构

https://www.modb.pro/db/650884

一文读懂Dragonfly网络拓扑
